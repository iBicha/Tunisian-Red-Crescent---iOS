// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `about`.
    static let about = ImageResource(bundle: _R.hostingBundle, name: "about")
    /// Image `accident`.
    static let accident = ImageResource(bundle: _R.hostingBundle, name: "accident")
    /// Image `accidentOk`.
    static let accidentOk = ImageResource(bundle: _R.hostingBundle, name: "accidentOk")
    /// Image `ambulance`.
    static let ambulance = ImageResource(bundle: _R.hostingBundle, name: "ambulance")
    /// Image `badge`.
    static let badge = ImageResource(bundle: _R.hostingBundle, name: "badge")
    /// Image `Brand Assets`.
    static let brandAssets = ImageResource(bundle: _R.hostingBundle, name: "Brand Assets")
    /// Image `camera_icon`.
    static let camera_icon = ImageResource(bundle: _R.hostingBundle, name: "camera_icon")
    /// Image `crtPlace`.
    static let crtPlace = ImageResource(bundle: _R.hostingBundle, name: "crtPlace")
    /// Image `facebookLogin`.
    static let facebookLogin = ImageResource(bundle: _R.hostingBundle, name: "facebookLogin")
    /// Image `facebook-logo`.
    static let facebookLogo = ImageResource(bundle: _R.hostingBundle, name: "facebook-logo")
    /// Image `fire`.
    static let fire = ImageResource(bundle: _R.hostingBundle, name: "fire")
    /// Image `gallery`.
    static let gallery = ImageResource(bundle: _R.hostingBundle, name: "gallery")
    /// Image `Location-Map-icon`.
    static let locationMapIcon = ImageResource(bundle: _R.hostingBundle, name: "Location-Map-icon")
    /// Image `male_shadow`.
    static let male_shadow = ImageResource(bundle: _R.hostingBundle, name: "male_shadow")
    /// Image `member_shadow`.
    static let member_shadow = ImageResource(bundle: _R.hostingBundle, name: "member_shadow")
    /// Image `message`.
    static let message = ImageResource(bundle: _R.hostingBundle, name: "message")
    /// Image `placeholder`.
    static let placeholder = ImageResource(bundle: _R.hostingBundle, name: "placeholder")
    /// Image `poison`.
    static let poison = ImageResource(bundle: _R.hostingBundle, name: "poison")
    /// Image `police`.
    static let police = ImageResource(bundle: _R.hostingBundle, name: "police")
    /// Image `Red Crescent 512x512`.
    static let redCrescent512x512 = ImageResource(bundle: _R.hostingBundle, name: "Red Crescent 512x512")
    /// Image `user`.
    static let user = ImageResource(bundle: _R.hostingBundle, name: "user")
    
    /// `UIImage(named: "about", bundle: ..., traitCollection: ...)`
    static func about(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.about, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "accident", bundle: ..., traitCollection: ...)`
    static func accident(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.accident, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "accidentOk", bundle: ..., traitCollection: ...)`
    static func accidentOk(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.accidentOk, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ambulance", bundle: ..., traitCollection: ...)`
    static func ambulance(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ambulance, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "badge", bundle: ..., traitCollection: ...)`
    static func badge(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.badge, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Brand Assets", bundle: ..., traitCollection: ...)`
    static func brandAssets(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.brandAssets, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "camera_icon", bundle: ..., traitCollection: ...)`
    static func camera_icon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.camera_icon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "crtPlace", bundle: ..., traitCollection: ...)`
    static func crtPlace(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.crtPlace, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "facebookLogin", bundle: ..., traitCollection: ...)`
    static func facebookLogin(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.facebookLogin, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "facebook-logo", bundle: ..., traitCollection: ...)`
    static func facebookLogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.facebookLogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fire, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "gallery", bundle: ..., traitCollection: ...)`
    static func gallery(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gallery, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Location-Map-icon", bundle: ..., traitCollection: ...)`
    static func locationMapIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.locationMapIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "male_shadow", bundle: ..., traitCollection: ...)`
    static func male_shadow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.male_shadow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "member_shadow", bundle: ..., traitCollection: ...)`
    static func member_shadow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.member_shadow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.message, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "poison", bundle: ..., traitCollection: ...)`
    static func poison(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.poison, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "police", bundle: ..., traitCollection: ...)`
    static func police(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.police, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Red Crescent 512x512", bundle: ..., traitCollection: ...)`
    static func redCrescent512x512(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.redCrescent512x512, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MenuCell`.
    static let menuCell: ReuseIdentifier<MenuCellView> = ReuseIdentifier(identifier: "MenuCell")
    /// Reuse identifier `MessageCell`.
    static let messageCell: ReuseIdentifier<MessageCellView> = ReuseIdentifier(identifier: "MessageCell")
    /// Reuse identifier `PhoneNumber`.
    static let phoneNumber: ReuseIdentifier<PhoneCellView> = ReuseIdentifier(identifier: "PhoneNumber")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `GoToSignup`.
      static let goToSignup: StoryboardSegueIdentifier<UIStoryboardSegue, LoginViewController, SignupViewController> = StoryboardSegueIdentifier(identifier: "GoToSignup")
      
      /// Optionally returns a typed version of segue `GoToSignup`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSignup(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, LoginViewController, SignupViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.goToSignup, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `MenuViewController`, and contains static references to 7 segues.
    struct menuViewController {
      /// Segue identifier `GoToAbout`.
      static let goToAbout: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, AboutViewController> = StoryboardSegueIdentifier(identifier: "GoToAbout")
      /// Segue identifier `GoToCall`.
      static let goToCall: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, CallViewController> = StoryboardSegueIdentifier(identifier: "GoToCall")
      /// Segue identifier `GoToLogin`.
      static let goToLogin: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, LoginViewController> = StoryboardSegueIdentifier(identifier: "GoToLogin")
      /// Segue identifier `GoToMessages`.
      static let goToMessages: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, MessagesViewController> = StoryboardSegueIdentifier(identifier: "GoToMessages")
      /// Segue identifier `GoToProfile`.
      static let goToProfile: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, ProfileViewController> = StoryboardSegueIdentifier(identifier: "GoToProfile")
      /// Segue identifier `GoToReportAccident`.
      static let goToReportAccident: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, ReportViewController> = StoryboardSegueIdentifier(identifier: "GoToReportAccident")
      /// Segue identifier `GoToSettings`.
      static let goToSettings: StoryboardSegueIdentifier<UIStoryboardSegue, MenuViewController, SettingsViewController> = StoryboardSegueIdentifier(identifier: "GoToSettings")
      
      /// Optionally returns a typed version of segue `GoToAbout`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToAbout(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, AboutViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToAbout, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToCall`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToCall(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, CallViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToCall, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToLogin(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, LoginViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToLogin, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToMessages`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMessages(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, MessagesViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToMessages, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToProfile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToProfile(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, ProfileViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToProfile, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToReportAccident`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToReportAccident(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, ReportViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToReportAccident, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `GoToSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSettings(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MenuViewController, SettingsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.goToSettings, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `MessagesViewController`, and contains static references to 1 segues.
    struct messagesViewController {
      /// Segue identifier `GoToMessageDetail`.
      static let goToMessageDetail: StoryboardSegueIdentifier<UIStoryboardSegue, MessagesViewController, MessageViewController> = StoryboardSegueIdentifier(identifier: "GoToMessageDetail")
      
      /// Optionally returns a typed version of segue `GoToMessageDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMessageDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MessagesViewController, MessageViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.messagesViewController.goToMessageDetail, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LaunchScreenAnimated`.
    static let launchScreenAnimated = _R.storyboard.launchScreenAnimated()
    /// Storyboard `Main-3.5`.
    static let main35 = _R.storyboard.main35()
    /// Storyboard `Main-4`.
    static let main4 = _R.storyboard.main4()
    /// Storyboard `Main-4.7`.
    static let main47 = _R.storyboard.main47()
    /// Storyboard `Main-5.5`.
    static let main55 = _R.storyboard.main55()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LaunchScreenAnimated", bundle: ...)`
    static func launchScreenAnimated(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreenAnimated)
    }
    
    /// `UIStoryboard(name: "Main-3.5", bundle: ...)`
    static func main35(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main35)
    }
    
    /// `UIStoryboard(name: "Main-4", bundle: ...)`
    static func main4(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main4)
    }
    
    /// `UIStoryboard(name: "Main-4.7", bundle: ...)`
    static func main47(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main47)
    }
    
    /// `UIStoryboard(name: "Main-5.5", bundle: ...)`
    static func main55(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main55)
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "com.esprit.Tunisian-Red-Crescent") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main35.validate()
      try main47.validate()
      try main4.validate()
      try launchScreen.validate()
      try launchScreenAnimated.validate()
      try main55.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "Red Crescent 512x512") == nil { throw ValidationError(description: "[R.swift] Image named 'Red Crescent 512x512' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct launchScreenAnimated: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchScreenController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreenAnimated"
      
      static func validate() throws {
        if UIImage(named: "Red Crescent 512x512") == nil { throw ValidationError(description: "[R.swift] Image named 'Red Crescent 512x512' is used in storyboard 'LaunchScreenAnimated', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct main35: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Main-3.5"
      let viewController1 = StoryboardViewControllerResource<MapViewController>(identifier: "ViewController1")
      
      static func validate() throws {
        if UIImage(named: "facebookLogin") == nil { throw ValidationError(description: "[R.swift] Image named 'facebookLogin' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "about") == nil { throw ValidationError(description: "[R.swift] Image named 'about' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "placeholder") == nil { throw ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "message") == nil { throw ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "gallery") == nil { throw ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "camera_icon") == nil { throw ValidationError(description: "[R.swift] Image named 'camera_icon' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if UIImage(named: "badge") == nil { throw ValidationError(description: "[R.swift] Image named 'badge' is used in storyboard 'Main-3.5', but couldn't be loaded.") }
        if _R.storyboard.main35().viewController1() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'viewController1' could not be loaded from storyboard 'Main-3.5' as 'MapViewController'.") }
      }
      
      func viewController1(_: Void) -> MapViewController? {
        return UIStoryboard(resource: self).instantiateViewController(viewController1)
      }
      
      private init() {}
    }
    
    struct main4: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Main-4"
      let viewController1 = StoryboardViewControllerResource<MapViewController>(identifier: "ViewController1")
      
      static func validate() throws {
        if UIImage(named: "facebookLogin") == nil { throw ValidationError(description: "[R.swift] Image named 'facebookLogin' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "about") == nil { throw ValidationError(description: "[R.swift] Image named 'about' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "placeholder") == nil { throw ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "message") == nil { throw ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "gallery") == nil { throw ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "camera_icon") == nil { throw ValidationError(description: "[R.swift] Image named 'camera_icon' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if UIImage(named: "badge") == nil { throw ValidationError(description: "[R.swift] Image named 'badge' is used in storyboard 'Main-4', but couldn't be loaded.") }
        if _R.storyboard.main4().viewController1() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'viewController1' could not be loaded from storyboard 'Main-4' as 'MapViewController'.") }
      }
      
      func viewController1(_: Void) -> MapViewController? {
        return UIStoryboard(resource: self).instantiateViewController(viewController1)
      }
      
      private init() {}
    }
    
    struct main47: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Main-4.7"
      let viewController1 = StoryboardViewControllerResource<MapViewController>(identifier: "ViewController1")
      
      static func validate() throws {
        if UIImage(named: "facebookLogin") == nil { throw ValidationError(description: "[R.swift] Image named 'facebookLogin' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "about") == nil { throw ValidationError(description: "[R.swift] Image named 'about' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "placeholder") == nil { throw ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "message") == nil { throw ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "gallery") == nil { throw ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "camera_icon") == nil { throw ValidationError(description: "[R.swift] Image named 'camera_icon' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if UIImage(named: "badge") == nil { throw ValidationError(description: "[R.swift] Image named 'badge' is used in storyboard 'Main-4.7', but couldn't be loaded.") }
        if _R.storyboard.main47().viewController1() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'viewController1' could not be loaded from storyboard 'Main-4.7' as 'MapViewController'.") }
      }
      
      func viewController1(_: Void) -> MapViewController? {
        return UIStoryboard(resource: self).instantiateViewController(viewController1)
      }
      
      private init() {}
    }
    
    struct main55: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Main-5.5"
      let viewController1 = StoryboardViewControllerResource<MapViewController>(identifier: "ViewController1")
      
      static func validate() throws {
        if UIImage(named: "facebookLogin") == nil { throw ValidationError(description: "[R.swift] Image named 'facebookLogin' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "about") == nil { throw ValidationError(description: "[R.swift] Image named 'about' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "placeholder") == nil { throw ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "message") == nil { throw ValidationError(description: "[R.swift] Image named 'message' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "gallery") == nil { throw ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "camera_icon") == nil { throw ValidationError(description: "[R.swift] Image named 'camera_icon' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if UIImage(named: "badge") == nil { throw ValidationError(description: "[R.swift] Image named 'badge' is used in storyboard 'Main-5.5', but couldn't be loaded.") }
        if _R.storyboard.main55().viewController1() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'viewController1' could not be loaded from storyboard 'Main-5.5' as 'MapViewController'.") }
      }
      
      func viewController1(_: Void) -> MapViewController? {
        return UIStoryboard(resource: self).instantiateViewController(viewController1)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}